Connection Pool,
: 디비에 연결 하기 위한 자원 소모가 많음.
그래서, 매번 연결시마다 connection 만들기 보다,
미리 몇개를 만들어서, 재사용.
예시)
자바 String str = "lsy"
기본 문자열은 변경 불가.
str + "234", 새로운 문자열 생성, 새 메모리 또 사용했다.

StringBuffer, 변경가능.
str + "234", 기존 문자열에 추가. 기존 메모리 재사용.

종류가, 여러가지,
DBCP, C3PO, 라이브러리, 커넥션 풀 관련 기능들,
그중에서, HikariCP 라이브러리 이용해서,
접근시 자원을 소모를 줄이겠다.
재사용해서,
자원 효율적으로 사용가능, 성능도 좋아짐.

도구 이용하기 위해서, build.gradle 설치 후, 적용하기.

  //Hikari Cp 설치
    // https://mvnrepository.com/artifact/com.zaxxer/HikariCP
    implementation group: 'com.zaxxer', name: 'HikariCP', version: '5.1.0'

    // https://mvnrepository.com/artifact/com.zaxxer/HikariCP
    implementation group: 'com.zaxxer', name: 'HikariCP', version: '6.2.1'

-------------------------------------------------------------
# HikariCP 개념 및 설명

## HikariCP란?

HikariCP는 가볍고 빠르며 안정적인 JDBC 커넥션 풀(Connection Pool) 라이브러리입니다. "Hikari"는 일본어로 "빛"을 의미하며, 이름처럼 매우 빠른 성능을 자랑합니다. Brett Wooldridge가 개발한 이 라이브러리는 현재 Spring Boot 2.0 이상 버전에서 기본 커넥션 풀로 채택되었습니다.

## 커넥션 풀(Connection Pool)의 필요성

데이터베이스 연결은 비용이 많이 드는 작업입니다:
1. TCP 소켓 연결
2. 데이터베이스 인증
3. 권한 검사
4. 연결 상태 설정

매 요청마다 이 과정을 반복하면 성능 저하가 발생합니다. 커넥션 풀은 미리 연결을 생성하고 재사용하여 이 문제를 해결합니다.

## HikariCP의 특징

1. **높은 성능**
   - 최적화된 코드로 다른 커넥션 풀보다 빠릅니다.
   - 벤치마크 테스트에서 Commons DBCP, C3P0 등 타 라이브러리보다 우수한 성능을 보입니다.

2. **간결한 설정**
   - 최소한의 설정으로 높은 성능을 제공합니다.
   - 합리적인 기본값을 제공하여 별도 튜닝 없이도 잘 작동합니다.

3. **안정성**
   - 철저한 테스트와 검증을 거친 코드베이스
   - 커넥션 누수(Connection Leak) 방지 기능 내장

4. **모니터링**
   - JMX를 통한 모니터링 기능 제공
   - 상세한 메트릭 정보 제공

## 주요 설정 옵션

| 설정 | 설명 | 기본값 | 권장값 |
|------|------|--------|--------|
| `minimumIdle` | 풀에서 유지할 최소 유휴 연결 수 | 10 | 애플리케이션에 맞게 설정 |
| `maximumPoolSize` | 풀이 가질 수 있는 최대 연결 수 | 10 | (코어 수 × 2) + 효과적인 디스크 수 |
| `connectionTimeout` | 클라이언트가 연결을 기다리는 최대 시간(ms) | 30000 (30초) | 기본값 권장 |
| `idleTimeout` | 연결이 풀에서 유휴 상태로 있을 수 있는 최대 시간(ms) | 600000 (10분) | 기본값 권장 |
| `maxLifetime` | 연결의 최대 수명(ms) | 1800000 (30분) | DB의 연결 타임아웃보다 짧게 설정 |
| `autoCommit` | 자동 커밋 모드 설정 | true | 애플리케이션에 맞게 설정 |

## 코드 예제

### 1. 기본 설정 (Java 코드)

```java
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

public class DatabaseConfig {

    public HikariDataSource dataSource() {
        HikariConfig config = new HikariConfig();
        config.setJdbcUrl("jdbc:mysql://localhost:3306/mydb");
        config.setUsername("username");
        config.setPassword("password");
        config.setDriverClassName("com.mysql.cj.jdbc.Driver");

        // 추가 설정
        config.setMinimumIdle(5);
        config.setMaximumPoolSize(10);
        config.setIdleTimeout(300000);
        config.setMaxLifetime(1200000);
        config.setConnectionTestQuery("SELECT 1");

        return new HikariDataSource(config);
    }
}
```

### 2. Spring Boot에서 HikariCP 설정 (application.properties)

```properties
# 데이터소스 기본 설정
spring.datasource.url=jdbc:mysql://localhost:3306/mydb
spring.datasource.username=username
spring.datasource.password=password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# HikariCP 설정
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.pool-name=MyHikariPool
```

### 3. Spring Boot에서 HikariCP 설정 (application.yml)

```yaml
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/mydb
    username: username
    password: password
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      minimum-idle: 5
      maximum-pool-size: 10
      idle-timeout: 300000
      max-lifetime: 1200000
      connection-timeout: 30000
      pool-name: MyHikariPool
```

## HikariCP의 작동 방식

1. **연결 획득 프로세스**:
   - 애플리케이션이 커넥션을 요청합니다.
   - 풀에 유휴 연결이 있으면 즉시 제공됩니다.
   - 유휴 연결이 없고 풀이 가득 찼으면 `connectionTimeout` 시간 동안 대기합니다.
   - 시간 초과되면 `SQLException`이 발생합니다.

2. **연결 반환 프로세스**:
   - 애플리케이션이 연결 사용을 마치면 풀로 반환됩니다.
   - 연결은 유휴 상태가 되고 다시 사용할 수 있게 됩니다.
   - `idleTimeout` 시간 동안 사용되지 않으면 연결이 종료됩니다(단, `minimumIdle` 이상은 유지).

3. **연결 유효성 검사**:
   - 풀에서 연결을 가져올 때 유효성을 검사합니다.
   - 필요에 따라 `connectionTestQuery` 또는 JDBC4 isValid() 메서드를 사용합니다.

## 성능 최적화 팁

1. **적절한 풀 크기 설정**:
   - 공식: `connections = ((core_count * 2) + effective_spindle_count)`
   - 코어 수와 디스크 수를 고려하여 설정합니다.

2. **준비된 문장(Prepared Statement) 캐싱 활용**:
   - `prepStmtCacheSize` 및 `prepStmtCacheSqlLimit` 설정을 통해 SQL 문장 재사용을 최적화합니다.

3. **연결 테스트 최소화**:
   - 필요한 경우에만 연결 유효성을 검사합니다.
   - JDBC4 isValid() 메서드 사용이 더 효율적입니다.

4. **maxLifetime 설정**:
   - 데이터베이스의 연결 타임아웃보다 짧게 설정하여 "stale connection" 문제를 방지합니다.

## 실제 사용 예제: Spring Boot + HikariCP + JPA

```java
@Service
public class UserService {

    private final EntityManager entityManager;

    @Autowired
    public UserService(EntityManager entityManager) {
        this.entityManager = entityManager;
    }

    @Transactional
    public User findById(Long id) {
        return entityManager.find(User.class, id);
    }

    @Transactional
    public List<User> findAllUsers() {
        return entityManager.createQuery("SELECT u FROM User u", User.class)
            .getResultList();
    }

    @Transactional
    public void saveUser(User user) {
        entityManager.persist(user);
    }
}
```

## 모니터링

HikariCP는 JMX를 통해 다음과 같은 메트릭을 제공합니다:

- `activeConnections`: 현재 활성 연결 수
- `idleConnections`: 현재 유휴 연결 수
- `totalConnections`: 총 연결 수
- `threadsAwaitingConnection`: 연결을 기다리는 스레드 수
- `connectionTimeoutCount`: 연결 시간 초과 횟수

Spring Boot Actuator와 함께 사용하면 더 쉽게 모니터링할 수 있습니다.

## 결론

HikariCP는 성능, 안정성, 사용 편의성의 균형을 잘 맞춘 JDBC 커넥션 풀 라이브러리입니다. 특히 Spring Boot 애플리케이션에서 기본으로 사용되며, 최소한의 설정으로도 높은 성능을 발휘합니다. 대규모 애플리케이션에서는 환경에 맞는 적절한 풀 크기와 타임아웃 설정이 중요합니다.
